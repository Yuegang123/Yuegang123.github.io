<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Activity基本使用</title>
    <url>/2022/05/16/Activity%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>在res下的AndroidMainfest.xml中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//表明将LoginActivity作为程序主入口</span></span><br><span class="line">&lt;activity android:name=<span class="string">&quot;.activity.LoginActivity&quot;</span>&gt;</span><br><span class="line">            &lt;intent-filter&gt;</span><br><span class="line">                &lt;action android:name=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">                &lt;category android:name=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span><br><span class="line">            &lt;/intent-filter&gt;</span><br><span class="line">        &lt;/activity&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Activity基本使用</tag>
      </tags>
  </entry>
  <entry>
    <title>Android控件</title>
    <url>/2022/05/16/Android%E6%8E%A7%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="一"><a href="#一" class="headerlink" title="一"></a>一</h3><p>android:id：该控件的id<br>android:text：文本<br>android:textSize：文本大小<br>android:textAlignment：文本对齐方式<br>android:typeface：文本字体</p>
<ol>
<li>文本框(TextView)<br>  TextView直接继承View，作用就是在界面上显示文本(类似于Swing中的JLabel)，同时它还是EditText、Button两个UI组件类的父类。<br>  另外Android关闭了它的文字编辑功能，如果想编辑内容，则可以使用EditText。</li>
<li>编辑框(EditText)<br>  EditText和TextView非常相似，它与TextView共用了绝大总分XML属性和文法，<blockquote>
<p>二者最大区别在于：EditText可以接受用户输入。</p>
</blockquote>
</li>
</ol>
<p>android中的hint属性；输入框 指定提示语</p>
<p>android:drawableBottom：在text的下方输出一个drawable，可以是图片，样式，颜色等。<br>android:drawableLeft：在text的左边输出一个drawable，可以是图片，样式，颜色等。<br>android:drawableRight：在text的右边输出一个drawable，可以是图片，样式，颜色等。<br>android:drawableTop：在text的正上方输出一个drawable，可以是图片，样式，颜色等。<br>android:drawableStart: 在text的开始处输出一个drawable，可以是图片，样式，颜色等。<br>android:drawableEnd: 在text的结束处输出一个drawable，可以是图片，样式，颜色等。<br>android:drawablePadding：设置text与drawable的间距，是与drawableLeft、 drawableRight、drawableTop、drawableBottom一起使用。</p>
<p>android:layout_width:它是用来分配剩余空间的一个属性，你可以设置他的权重。0是默认宽度layout_width值wrap_content,1,2,3,4,自行测试</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android控件</tag>
      </tags>
  </entry>
  <entry>
    <title>Android布局</title>
    <url>/2022/05/16/Android%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<p>一般在根布局文件中会出现 tools：context &#x3D; 某个activity名称。<br>这个属性的意思是：如果你在AndroidManifest.xml文件中为某个activity设置了Theme样式，那么，一般情况下，你在layout布局里面是无法直接看到这个效果的。因为一份layout布局可以提供给很多个activity用，layout无法知道自己提供给了哪个activity，而这个activity又设置了怎样的样式。所以，我们要为layout设置这样一个属性，来告诉layout当前提供给了哪个activity使用，从而实时显示这个activity所设置的样式效果（如果有）。也就是，layout —-&gt;   activity —-&gt;Theme，建立起了链接。否则，即使你为activity设置了样式，你的layout布局文件也是不知道的。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android布局</tag>
      </tags>
  </entry>
  <entry>
    <title>KMP算法</title>
    <url>/2022/04/19/KMP%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC</title>
    <url>/2022/07/12/JDBC/</url>
    <content><![CDATA[<h3 id="一、JDBC基础知识"><a href="#一、JDBC基础知识" class="headerlink" title="一、JDBC基础知识"></a>一、JDBC基础知识</h3><p>可以使用<strong>DriverManager、Connection、PreparedStatement、ResultSet</strong>对数据库进行增删改查</p>
<ul>
<li><p>DriverManager（工厂设计模式，属于工厂类）</p>
<ul>
<li>根据指定的数据库连接地址、用户名、密码取得数据库的连接</li>
<li>DriverManager.getConnection(url,user,password)</li>
</ul>
</li>
<li><p>Connection</p>
<ul>
<li>使用Connection接口对象进行封装，只要有一个新的Connectiond对象表示要连接一次数据库</li>
<li>事务<ul>
<li>commit()提交</li>
<li>rollback()回滚</li>
<li>setAutoCommit()设置是否自动提交</li>
</ul>
</li>
</ul>
</li>
<li><p>PreparedStatement(Statement的子接口)</p>
<ul>
<li>由于Statement执行时需要拼凑SQL语句，对于一些敏感字符操作不方便</li>
<li>Connection接口中的PreparedStatement()方法可以创建PreparedStatement接口对象，可以与SQL语句结合实现数据库的数据操作</li>
<li>占位符？利用下面方法根据索引顺序设置每个占位符的数据<ul>
<li>setInt(1，数字)、setString(2，字符串)、setDate(3，date对象)等</li>
</ul>
</li>
<li>数据查询：ResultSet PreparedStatement.executeQuery()</li>
<li>数据更新：int PreparedStatement.executeUpdate()返回更新的数据行数</li>
<li>批处理：PreparedStatement.addBatch()</li>
</ul>
</li>
<li><p>ResultSet</p>
<ul>
<li>接口定义了两种方法ResultSet.next()向下移动指针判断是否有数据行</li>
<li>取出的方法<ul>
<li>getInt()</li>
<li>getDouble()</li>
<li>getString()</li>
<li>getDate()</li>
</ul>
</li>
</ul>
</li>
<li><p>释放占用的资源</p>
<ul>
<li>onnection、PreparedStatement、ResultSet、Statement4个接口都提供了close()方法</li>
<li>通常只关闭Connection的即可</li>
</ul>
</li>
<li><p>4种驱动分类：</p>
<ul>
<li>JDBC-ODBC桥接技术<ul>
<li>ODBC是由微软开发的数据库编程接口，先用ODBC进行数据库连接，再用JDBC连接ODBC</li>
</ul>
</li>
<li>JDBC本地驱动</li>
<li>JDBC网络驱动<ul>
<li>利用特定的数据库连接协议进行数据库的网络连接，可以连接任何指定的服务器的数据库，实际开发广泛使用</li>
</ul>
</li>
<li>JDBC协议驱动</li>
</ul>
</li>
</ul>
<hr>
<h3 id="二、JDBC-使用java操作mysql数据库的标准流程"><a href="#二、JDBC-使用java操作mysql数据库的标准流程" class="headerlink" title="二、JDBC-使用java操作mysql数据库的标准流程"></a>二、JDBC-使用java操作mysql数据库的标准流程</h3><p>Java本地驱动：<br>Java制定的接口，然后由其它的数据库厂家进行实现，实现出来的就是这个驱动，该驱动程序需要不同的数据库配置与之匹配<br><a href="https://mvnrepository.com/">可通过该链接查询</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line"><span class="comment">//依赖</span></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">8.0</span><span class="number">.19</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>
<p>接口来接它的类实例</p>
<blockquote>
<p>优点：当我们修改其他驱动时，比如我用mysql的驱动，那么上面那些东西不用修改，因为是父接口，父接口可以接子类的实现</p>
</blockquote>
<blockquote>
<p>缺点：连接数据库的信息硬编码进了java文件，当要修改时（比如换了密码），对于已编译的程序无法修改，只能改源码重新编译；返回的结果集操作比较麻烦；数据不能直接转为java类，需要手动</p>
</blockquote>
<p>标准流程如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果要进行数据库的连接操作，要使用java.sql包中提供的程序类，提供了DriverManager、Connection、PreparedStatement、ResultSet这些类</span></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//没有mybatis时是用JDBC进行数据库的操作的流程</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//加载数据库驱动程序</span></span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">            <span class="comment">//获取连接</span></span><br><span class="line">            <span class="comment">//mysql的版本在8.0以后，数据库驱动配置时，需要在代码url的链接里面指定serverTimezone。否则就会出现异常</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/mysql_test?serverTimezone=GMT%2B8&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line">            connection = DriverManager.getConnection(url, user, password);</span><br><span class="line">            <span class="comment">//？是占位符，预处理，不建议用*</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from customer where id = ?&quot;</span>;</span><br><span class="line">            <span class="comment">//connection.prepareStatement()方法创建对象prepareStatement对数据库操作</span></span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//设置查询关键字，第几个，值</span></span><br><span class="line">            preparedStatement.setInt(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//preparedStatement.executeQuery()数据查询方法</span></span><br><span class="line">            rs = preparedStatement.executeQuery();</span><br><span class="line">            <span class="comment">//循环取出每一行数据，输出结果集</span></span><br><span class="line">            <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">                System.out.println(rs.getInt(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">                System.out.println(rs.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">                System.out.println(rs.getString(<span class="string">&quot;sex&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;  <span class="comment">//关闭资源 connection rs preparedstatment三个都要关闭</span></span><br><span class="line">            <span class="keyword">if</span> (rs != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (preparedStatement != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    preparedStatement.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JAVA基础</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>JDBC</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis</title>
    <url>/2022/07/12/MyBatis/</url>
    <content><![CDATA[<p>对JDBC连接数据库等操作进行一些封装，使用户可以专注在DDL、DQL、DML上，不用处理例如注册驱动、创建connection、创建statement、手动设置参数、结果集检索等</p>
<p>一、基本使用<br>1.引入依赖，驱动和包<br><a href="https://mvnrepository.com/">可通过该链接查询</a><br>2.开发持久化类，比如Customer类<br>3.配置mybatis-config.xml全局文件（连接信息）<br><a href="https://mybatis.net.cn/getting-started.html">可通过该链接查询</a></p>
]]></content>
      <categories>
        <category>JAVAWEB开发</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MarkDown基础语法</title>
    <url>/2022/04/16/MarkDown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h2 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h2><p>1、第一种是使用#表示标题，其中#号必须在行首</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p>2、第二种是使用&#x3D;&#x3D;&#x3D;或者—表示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一级标题</span><br><span class="line">===</span><br><span class="line">二级标题</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<h1 id="一级标题-1"><a href="#一级标题-1" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题-1"><a href="#二级标题-1" class="headerlink" title="二级标题"></a>二级标题</h2><hr>
<h2 id="二、分割线"><a href="#二、分割线" class="headerlink" title="二、分割线"></a>二、分割线</h2><p>使用三个或以上的-或*表示，且这行只有符号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--------</span><br><span class="line">********</span><br></pre></td></tr></table></figure>
<hr>
<hr>
<h2 id="三、斜体和粗体和引用"><a href="#三、斜体和粗体和引用" class="headerlink" title="三、斜体和粗体和引用"></a>三、斜体和粗体和引用</h2><p>使用 * 和 ** 分别表示斜体和粗体，删除线使用两个 ~ 表示<br>引用用&gt;表示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*斜体* **粗体** ***又斜又粗***</span><br><span class="line">~~删除文字~~ </span><br><span class="line">&gt; a secret makes a woman woman  --贝尔摩德</span><br></pre></td></tr></table></figure>
<p><em>斜体</em> <strong>粗体</strong> <em><strong>又斜又粗</strong></em><br><del>删除文字</del> </p>
<blockquote>
<p>a secret makes a woman woman  –贝尔摩德</p>
</blockquote>
<hr>
<h2 id="四、列表"><a href="#四、列表" class="headerlink" title="四、列表"></a>四、列表</h2><p>无序表：使用* 表示一级，缩进后表示二级<br>有序表：标注好1. 、2. 、3. 就可以显示</p>
<blockquote>
<p>注意后面都有个空格</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* 一级列表</span><br><span class="line">    * 二级列表</span><br><span class="line">    * 二级列表</span><br><span class="line">        * 三级列表</span><br><span class="line"></span><br><span class="line">1. 一层</span><br><span class="line">    1. 二层</span><br><span class="line">    2. 二层</span><br><span class="line">2. 一层</span><br></pre></td></tr></table></figure>
<ul>
<li>一级列表<ul>
<li>二级列表</li>
<li>二级列表<ul>
<li>三级列表</li>
</ul>
</li>
</ul>
</li>
</ul>
<ol>
<li>一层<ol>
<li>二层</li>
<li>二层</li>
</ol>
</li>
<li>一层</li>
</ol>
<hr>
<h2 id="五、代码块"><a href="#五、代码块" class="headerlink" title="五、代码块"></a>五、代码块</h2><p>用&#96;表示<br>有些字符需要用\进行转义</p>
<blockquote>
<p>后面加java,cpp,c等可以有代码高亮,如&#96;&#96;&#96;java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="六、表格"><a href="#六、表格" class="headerlink" title="六、表格"></a>六、表格</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|商品|数量|单价|</span><br><span class="line">|---|---:|:---:|</span><br><span class="line">|苹果|10|\$1|</span><br><span class="line">|电脑|1|\$10000|</span><br></pre></td></tr></table></figure>
<blockquote>
<p>表格符只能在第二行</p>
</blockquote>
<table>
<thead>
<tr>
<th>商品</th>
<th align="right">数量</th>
<th align="center">单价</th>
</tr>
</thead>
<tbody><tr>
<td>苹果</td>
<td align="right">10</td>
<td align="center">$1</td>
</tr>
<tr>
<td>电脑</td>
<td align="right">1</td>
<td align="center">$10000</td>
</tr>
</tbody></table>
<hr>
<h2 id="七、超链接和图片"><a href="#七、超链接和图片" class="headerlink" title="七、超链接和图片"></a>七、超链接和图片</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![柯南](/images/conan.jpg &quot;柯南&quot;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>图片alt就是显示在图片下面的文字，相当于对图片内容的解释。<br>图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</p>
</blockquote>
<p><img src="/images/conan.jpg" alt="柯南&amp;新一？" title="柯南"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[哔哩哔哩](https://www.bilibili.com/ &quot;b站&quot;)</span><br></pre></td></tr></table></figure>

<p><a href="https://www.bilibili.com/" title="b站">哔哩哔哩</a></p>
<blockquote>
<p>title可加可不加</p>
</blockquote>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL知识</title>
    <url>/2022/07/12/MySQL/</url>
    <content><![CDATA[<h3 id="一、基本认识"><a href="#一、基本认识" class="headerlink" title="一、基本认识"></a>一、基本认识</h3><p>1.命令在用；结束<br>2.输入exit退出<br>3.不区分大小写，但最好重要语句大写，表名小写<br>4.事务通常 BEGIN WORK 语句开始，COMMIT或ROLLBACK结束，成功则提交，否则回滚；AUTOCOMMIT控制事务行为，默认是1，自动提交；设置为0，不会自动提交<br>5.登陆数据库 mysql -uxxx -pXXX  (xxx是用户名，XXX是密码)<br>6.选择数据库 use XXX;<br>7.显示可用数据库 show databases; （有s）<br>8.显示可用表 show tables; （有s）<br>9.显示表的列 show columns from XXX (XXX是表名)</p>
<hr>
<h3 id="二、DDL-对库、表的操作"><a href="#二、DDL-对库、表的操作" class="headerlink" title="二、DDL(对库、表的操作)"></a>二、DDL(对库、表的操作)</h3><ol>
<li><p>创建数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database XXX;</span><br></pre></td></tr></table></figure></li>
<li><p>删除数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> database XXX</span><br></pre></td></tr></table></figure></li>
<li><p>创建新表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> XXX（</span><br><span class="line">字段名<span class="number">1</span> 类型，</span><br><span class="line">字段名<span class="number">2</span> 类型,</span><br><span class="line">字段名<span class="number">3</span> 类型,…）;</span><br><span class="line"></span><br><span class="line">例：<span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student(</span><br><span class="line">stu_id <span class="type">INT</span>,</span><br><span class="line">stu_name <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">stu_sex <span class="type">VARCHAR</span>(<span class="number">1</span>),</span><br><span class="line">stu_age <span class="type">INT</span>,</span><br><span class="line">stu_class <span class="type">VARCHAR</span>(<span class="number">20</span>));</span><br></pre></td></tr></table></figure></li>
<li><p>根据已有的表创建新表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">A：<span class="keyword">create</span> <span class="keyword">table</span> 新表名 <span class="keyword">like</span> 旧表名（使用旧表创建新表）</span><br><span class="line">B：<span class="keyword">create</span> <span class="keyword">table</span> 新表名 <span class="keyword">as</span> <span class="keyword">select</span> 列名<span class="number">1</span>,列名<span class="number">2</span>… <span class="keyword">from</span> 旧表名 definition <span class="keyword">only</span></span><br></pre></td></tr></table></figure></li>
<li><p>删除表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> XXX</span><br></pre></td></tr></table></figure></li>
<li><p>增加一个列名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 列名 类型</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>指定列名后面添加列名</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 已有列名 after 列名 类型</span><br><span class="line"><span class="keyword">first</span>：第一个，before：前一个，<span class="keyword">end</span>：最后</span><br></pre></td></tr></table></figure></li>
<li><p>删除一个列名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> 列名</span><br></pre></td></tr></table></figure></li>
<li><p>修改一个列名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 change 旧列名 新列名 类型</span><br></pre></td></tr></table></figure></li>
<li><p>添加主键</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> <span class="keyword">primary</span> key（列名）</span><br></pre></td></tr></table></figure></li>
<li><p>删除主键</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> <span class="keyword">primary</span> key（列名）</span><br></pre></td></tr></table></figure></li>
<li><p>添加外键</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> <span class="keyword">foreign</span> key（列名） <span class="keyword">references</span> 表名（主键）</span><br></pre></td></tr></table></figure></li>
<li><p>删除外键</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">需要找到外键特有的名称</span><br></pre></td></tr></table></figure>
</li>
<li><p>约束类型</p>
<ol>
<li>not null：非空约束</li>
<li>unique：唯一约束</li>
<li>primary key：主键</li>
<li>foreign key：外键</li>
<li>auto_increment：自增长</li>
<li>default：设置默认值 例：default ‘值’</li>
</ol>
</li>
</ol>
<hr>
<h3 id="三、DQL-查询语句"><a href="#三、DQL-查询语句" class="headerlink" title="三、DQL(查询语句)"></a>三、DQL(查询语句)</h3><h3 id="四、DML-插入，修改，删除语句"><a href="#四、DML-插入，修改，删除语句" class="headerlink" title="四、DML(插入，修改，删除语句)"></a>四、DML(插入，修改，删除语句)</h3>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树的基本概念</title>
    <url>/2022/04/19/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<h2 id="一、二叉树的定义"><a href="#一、二叉树的定义" class="headerlink" title="一、二叉树的定义"></a>一、二叉树的定义</h2><ol>
<li>一般二叉树</li>
<li>完全二叉树</li>
</ol>
<hr>
<h2 id="二、二叉树的性质"><a href="#二、二叉树的性质" class="headerlink" title="二、二叉树的性质"></a>二、二叉树的性质</h2><hr>
<h2 id="三、二叉树的存储结构"><a href="#三、二叉树的存储结构" class="headerlink" title="三、二叉树的存储结构"></a>三、二叉树的存储结构</h2><hr>
<h2 id="四、二叉树的遍历"><a href="#四、二叉树的遍历" class="headerlink" title="四、二叉树的遍历"></a>四、二叉树的遍历</h2><ol>
<li>前序遍历</li>
<li>中序遍历</li>
<li>后序遍历</li>
</ol>
<hr>
<h2 id="五、二叉树的建立"><a href="#五、二叉树的建立" class="headerlink" title="五、二叉树的建立"></a>五、二叉树的建立</h2><hr>
<h2 id="六、线索二叉树"><a href="#六、线索二叉树" class="headerlink" title="六、线索二叉树"></a>六、线索二叉树</h2><hr>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>二叉树</tag>
        <tag>概念</tag>
      </tags>
  </entry>
  <entry>
    <title>后缀表示法（逆波兰）</title>
    <url>/2022/04/19/%E5%90%8E%E7%BC%80%E8%A1%A8%E7%A4%BA%E6%B3%95/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title>cachelab实验</title>
    <url>/2022/05/08/cachelab/</url>
    <content><![CDATA[<blockquote>
<p>本实验将帮助您了解缓存对C程序性能的影响。实验由两部分组成。在第一部分中，您将编写一个模拟高速缓存行为的小型C程序（大约200-300行）。在第二部分中，您将优化一个小的矩阵转置函数，目标是最小化缓存未命中的数量。</p>
</blockquote>
<ol>
<li>使用到的命令<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./csim-ref [-hv] -s &lt;s&gt; -E &lt;E&gt; -b &lt;b&gt; -t &lt;tracefile&gt;</span><br><span class="line">//例如执行指令“./csim-ref -s 4 -E 1 -b 4 -t traces/yi.trace”将输出“yi.trace”内存引用轨迹文件在标准缓存模拟器（s=4，E=1，b=4）中的缓存使用情况）</span><br></pre></td></tr></table></figure></li>
<li>参考资料<br><a href="http://www.cs.cmu.edu/afs/cs/academic/class/15213-f15/www/recitations/rec07.pdf">CMU官方文档</a></li>
</ol>
<h2 id="（一）PART-A"><a href="#（一）PART-A" class="headerlink" title="（一）PART A"></a><strong>（一）PART A</strong></h2><hr>
<h3 id="1-cache的设计与实现"><a href="#1-cache的设计与实现" class="headerlink" title="1.cache的设计与实现"></a><strong>1.cache的设计与实现</strong></h3><p><img src="/images/2022-05-08-02-13-07.png"></p>
<p>分析：根据实验要求，这个模拟缓存并不真的需要存储数据，所以<strong>不需要使用块偏移，既B不重要</strong>；高速缓存行除了需要v,tag之外，还需要使用LRU（Least Recently Used 最近最少使用策略），具体就是当cache满的时候，选择最后访问时间距离现在最远的块进行驱逐&#x2F;替换，这里我的代码实现就是给每一行绑一个Lrunumber，<strong>这个值越大，代表这行最后访问时间距离现在越远，可以进行驱逐&#x2F;替换。</strong></p>
<p>根据该结构可以定义下面的结构体</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义行的属性</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> valid;</span><br><span class="line">    <span class="type">int</span> tag;</span><br><span class="line">    <span class="type">int</span> Lrunumber;</span><br><span class="line">&#125;cache_line;</span><br></pre></td></tr></table></figure>
<p><strong>根据图1</strong>，Cache可以设计成一个二维的结构体数组cache[S][E]，首先需要动态为其分配内存及初始化，然后释放，这里写两个函数，一个是分配内存的函数，一个是释放内存的函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//内存分配及初始化</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">initcache</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//整个cache的，开辟每一组的空间</span></span><br><span class="line">    cache = (cache_line**)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(cache_line*)*S);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;S; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//每一组的，开辟每一行的空间</span></span><br><span class="line">        cache[i] = (cache_line*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(cache_line)*E);</span><br><span class="line">        <span class="comment">//初始化每一行的属性</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;E; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            cache[i][j].valid = <span class="number">0</span>;</span><br><span class="line">            cache[i][j].tag = <span class="number">-1</span>;</span><br><span class="line">            cache[i][j].Lrunumber = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放内存</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">freecache</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//释放每一组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;S; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">free</span>(cache[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//释放整个cache</span></span><br><span class="line">    <span class="built_in">free</span>(cache);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第一部分ok, cache的结构，以及分配&#x2F;释放内存函数都写好了，在主函数main中，我们就可以为缓存cache分配内存，使用完后进行释放</p>
<hr>
<h3 id="2-参数的处理"><a href="#2-参数的处理" class="headerlink" title="2.参数的处理"></a><strong>2.参数的处理</strong></h3><p><img src="/images/2022-05-09-16-51-57.png"><br>分析：命令行的参数如何处理是个问题，因为命令行里的字符都是字符串，需要解析出s,E,b,t这些必要的参数是多少（h和v是可选参数，这里不做讨论），才能确定分配多少内存空间给缓存，才能确定去读哪个内存引用轨迹文件</p>
<p>这里官方文档中推荐了两个函数并给出了用法，我们可以直接使用<br><img src="/images/2022-05-09-16-59-55.png"><br><img src="/images/2022-05-09-17-01-06.png"></p>
<blockquote>
<p>getopt函数可以自动读取解析命令行的每个参数，不必太深究是如何实现，大概是每个参数都会给到optarg，因为命令行都是字符串，所以一些整型参数需要用函数atoi()进行转换，字符串t需要用strcpy()函数进行复制操作</p>
</blockquote>
<p>根据getopt函数，在主函数中写出如下代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//主函数，处理参数，进行各类函数调用</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//hit, miss, eviction初始化为0</span></span><br><span class="line">    hit = miss = eviction = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//getopt函数，具体请看用法</span></span><br><span class="line">    <span class="type">int</span> opt;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">-1</span>!=(opt = (getopt(argc,argv,<span class="string">&quot;hvs:E:b:t:&quot;</span>))))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span>(opt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;E&#x27;</span>:</span><br><span class="line">                E = atoi(optarg);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">                s = atoi(optarg);</span><br><span class="line">                S = <span class="number">1</span> &lt;&lt; s;                <span class="comment">// S=2^s</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span>:</span><br><span class="line">                b = atoi(optarg);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;t&#x27;</span>:</span><br><span class="line">                <span class="built_in">strcpy</span>(t,optarg);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span> :</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果参数不合法，直接退出</span></span><br><span class="line">    <span class="keyword">if</span>(s&lt;=<span class="number">0</span> || E&lt;=<span class="number">0</span> || b&lt;=<span class="number">0</span> || t==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    initcache();</span><br><span class="line"></span><br><span class="line">    parse_trace();</span><br><span class="line"></span><br><span class="line">    printSummary(hit, miss, eviction);</span><br><span class="line"></span><br><span class="line">    freecache();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果成功解析出s,E,b,t的参数，就进行内存的分配，cache的内存分配了，也知道去读哪个内存引用轨迹文件了，那怎么读呢？接下来就要写parse_trace()了</p>
<p><img src="/images/2022-05-09-17-13-24.png"><br><img src="/images/2022-05-09-17-13-41.png"></p>
<blockquote>
<p>每个数据加载（L）或存储（S）操作最多可导致一次缓存未命中。数据修改操作（M）被视为加载然后存储到同一地址（既一次加载和一次存储），所以M操作后不接break,因为还要进行一次S</p>
</blockquote>
<p>根据fscanf函数用法，写出如下代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//文本处理函数，解析操作，地址，大小</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">parse_trace</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    FILE* pFile;</span><br><span class="line">    pFile = fopen(t, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> identifier;        <span class="comment">//操作</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> address;   <span class="comment">//地址</span></span><br><span class="line">    <span class="type">int</span> size;               <span class="comment">//大小</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//当文件内文本有效时，while循环不停地读，并把地址传入update进行解析判断是否命中进行更新，还需要判断更新Lrunumber</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">fscanf</span>(pFile, <span class="string">&quot; %c %xu,%d\n&quot;</span>, &amp;identifier, &amp;address, &amp;size) &gt; <span class="number">0</span>)   </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">switch</span>(identifier)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;I&#x27;</span> :</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;L&#x27;</span> :</span><br><span class="line">                update(address);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;M&#x27;</span> :</span><br><span class="line">                update(address);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;S&#x27;</span> :</span><br><span class="line">                update(address);</span><br><span class="line">        &#125;</span><br><span class="line">        update_Lrunumber(); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//读完后关闭文件</span></span><br><span class="line">    fclose(pFile);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>循环中<strong>每次</strong>把除了I操作的其他操作的地址传入地址处理函数update（下面会说明），同时使用update_Lrunumber()函数将每组每行的有效位为1的缓存行的Lrunumber自增1（<strong>表示每次内存引用的时候，该缓存行都没有被用到，既没有命中，也没有进行替换或放置策略，所以自增1，当这个数越大，表示越久没有被使用过，后面进行替换策略时就可以用这个缓存行来替换</strong>）</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//更新Lrunumber,每一组每一行如果有效位为1，说明该行有数据，未被替换或放置，Lrunumber自增1</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">update_Lrunumber</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;S; ++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;E; ++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cache[i][j].valid == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                cache[i][j].Lrunumber++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="3-判断是否命中"><a href="#3-判断是否命中" class="headerlink" title="3.判断是否命中"></a><strong>3.判断是否命中</strong></h3><p><img src="/images/2022-05-12-00-47-29.png"></p>
<blockquote>
<p>分析：CPU想要读取字w时，会通过地址去寻找看它是否在缓存中，地址被分为t标记位和s组索引位和b块偏移位，<strong>第一步通过组索引找到缓存相应的组，第二步通过标记位找到相应的缓存行，当地址的tag和缓存行的tag匹配且有效位为1时，说明该块中有我们需要的数据</strong>，第三步就是通过块偏移取出数据，显然实验并不需要我们真的进行数据的读取&#x2F;存入。</p>
</blockquote>
<p>根据该原理写出如下代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//解析地址，去判断缓存是否命中，记录hit,miss,eviction的值，当高速缓存行被使用后，Lrunumber置为0，执行LRU策略时，选择Lrunumber最大的进行替换</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">update</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> address)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//解析出组索引</span></span><br><span class="line">    <span class="type">int</span> setindex_add = (address &gt;&gt; b) &amp; ((<span class="number">-1U</span>) &gt;&gt; (<span class="number">64</span> - s));</span><br><span class="line">    <span class="comment">//解析出tag</span></span><br><span class="line">    <span class="type">int</span> tag_add = address &gt;&gt; (b + s);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置最大的一个Lrunumber,初始化为最小</span></span><br><span class="line">    <span class="type">int</span> max_Lrunumber = INT_MIN;</span><br><span class="line">    <span class="type">int</span> max_Lrunumber_index = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//缓存命中，当地址的tag等于缓存行的tag</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;E; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//当这个组的某一缓存行的tag等于地址的tag，命中</span></span><br><span class="line">        <span class="keyword">if</span>(cache[setindex_add][i].tag == tag_add)</span><br><span class="line">        &#123;</span><br><span class="line">            hit++;</span><br><span class="line">            cache[setindex_add][i].Lrunumber = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//高速缓存行为空，说明未被使用，既高速缓存行的有效位为0时，执行放置策略</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;E; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//当这个组的某一缓存行的有效位为0，说明未被使用</span></span><br><span class="line">        <span class="keyword">if</span>(cache[setindex_add][i].valid == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            miss++;</span><br><span class="line">            cache[setindex_add][i].valid = <span class="number">1</span>;</span><br><span class="line">            cache[setindex_add][i].tag = tag_add;</span><br><span class="line">            cache[setindex_add][i].Lrunumber = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//高速缓存行满了且不命中，进行驱逐替换，执行LRU策略</span></span><br><span class="line">    miss++;</span><br><span class="line">    eviction++;</span><br><span class="line">    <span class="comment">//循环找出有最大的Lrunumber的那一行，记录下是哪一行（i）</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;E; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(cache[setindex_add][i].Lrunumber &gt; max_Lrunumber)</span><br><span class="line">        &#123;</span><br><span class="line">            max_Lrunumber = cache[setindex_add][i].Lrunumber;</span><br><span class="line">            max_Lrunumber_index = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//上面已经找到是哪一行可以替换，然后进行替换</span></span><br><span class="line">    cache[setindex_add][max_Lrunumber_index].tag = tag_add;</span><br><span class="line">    cache[setindex_add][max_Lrunumber_index].Lrunumber = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>判断缓存命中有3种情况，第一种是直接命中；第二种是不命中，缓存行为空，进行放置策略；第三种是不命中，缓存行满，需要进行驱逐&#x2F;替换。每次执行完这些操作后说明这些行最近都被用过，需要将Lrunumber置0，执行替换时，选择Lrunumber最大的进行替换（说明最久未被使用）</p>
</blockquote>
<blockquote>
<p>怎么解析出组索引和tag呢，利用位运算，<strong>任何数跟0相与都等于0，任何数跟1相与等于它本身</strong>，由于<strong>m &#x3D; t + s + b</strong>，所以地址直接右移s+b位得到t标记位。</p>
</blockquote>
<p><img src="/images/2022-05-12-01-29-40.png"><br><img src="/images/2022-05-12-01-30-45.png"></p>
<hr>
<h3 id="4-整体的代码"><a href="#4-整体的代码" class="headerlink" title="4.整体的代码"></a><strong>4.整体的代码</strong></h3><blockquote>
<p>整体代码添加了需要的头文件，以及为了方便操作函数，一些主要参数都设置成了全局变量，以便全部函数都能使用。</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cachelab.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;getopt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义全局变量，以便所有函数都能使用</span></span><br><span class="line"><span class="type">int</span> s,E,b,S; </span><br><span class="line"><span class="type">int</span> hit,miss,eviction;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> t[<span class="number">1000</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义行的属性</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> valid;</span><br><span class="line">    <span class="type">int</span> tag;</span><br><span class="line">    <span class="type">int</span> Lrunumber;</span><br><span class="line">&#125;cache_line;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义二维结构体数组</span></span><br><span class="line">cache_line** cache = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//内存分配及初始化</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">initcache</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//整个cache的，开辟每一组的空间</span></span><br><span class="line">    cache = (cache_line**)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(cache_line*)*S);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;S; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//每一组的，开辟每一行的空间</span></span><br><span class="line">        cache[i] = (cache_line*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(cache_line)*E);</span><br><span class="line">        <span class="comment">//初始化每一行的属性</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;E; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            cache[i][j].valid = <span class="number">0</span>;</span><br><span class="line">            cache[i][j].tag = <span class="number">-1</span>;</span><br><span class="line">            cache[i][j].Lrunumber = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放内存</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">freecache</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//释放每一组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;S; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">free</span>(cache[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//释放整个cache</span></span><br><span class="line">    <span class="built_in">free</span>(cache);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解析地址，去判断缓存是否命中，记录hit,miss,eviction的值，当高速缓存行被使用后，Lrunumber置为0，执行LRU策略时，选择Lrunumber最大的进行替换</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">update</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> address)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//解析出组索引</span></span><br><span class="line">    <span class="type">int</span> setindex_add = (address &gt;&gt; b) &amp; ((<span class="number">-1U</span>) &gt;&gt; (<span class="number">64</span> - s));</span><br><span class="line">    <span class="comment">//解析出tag</span></span><br><span class="line">    <span class="type">int</span> tag_add = address &gt;&gt; (b + s);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置最大的一个Lrunumber,初始化为最小</span></span><br><span class="line">    <span class="type">int</span> max_Lrunumber = INT_MIN;</span><br><span class="line">    <span class="type">int</span> max_Lrunumber_index = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//缓存命中，当地址的tag等于缓存行的tag</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;E; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//当这个组的某一缓存行的tag等于地址的tag，命中</span></span><br><span class="line">        <span class="keyword">if</span>(cache[setindex_add][i].tag == tag_add)</span><br><span class="line">        &#123;</span><br><span class="line">            hit++;</span><br><span class="line">            cache[setindex_add][i].Lrunumber = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//高速缓存行为空，说明未被使用，既高速缓存行的有效位为0时，执行放置策略</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;E; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//当这个组的某一缓存行的有效位为0，说明未被使用</span></span><br><span class="line">        <span class="keyword">if</span>(cache[setindex_add][i].valid == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            miss++;</span><br><span class="line">            cache[setindex_add][i].valid = <span class="number">1</span>;</span><br><span class="line">            cache[setindex_add][i].tag = tag_add;</span><br><span class="line">            cache[setindex_add][i].Lrunumber = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//高速缓存行满了且不命中，进行驱逐替换，执行LRU策略</span></span><br><span class="line">    miss++;</span><br><span class="line">    eviction++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;E; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(cache[setindex_add][i].Lrunumber &gt; max_Lrunumber)</span><br><span class="line">        &#123;</span><br><span class="line">            max_Lrunumber = cache[setindex_add][i].Lrunumber;</span><br><span class="line">            max_Lrunumber_index = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cache[setindex_add][max_Lrunumber_index].tag = tag_add;</span><br><span class="line">    cache[setindex_add][max_Lrunumber_index].Lrunumber = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//更新Lrunumber,每一组每一行如果有效位为1，说明该行有数据，未被替换或放置，Lrunumber自增1</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">update_Lrunumber</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;S; ++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;E; ++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cache[i][j].valid == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                cache[i][j].Lrunumber++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//文本处理函数，解析操作，地址，大小</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">parse_trace</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    FILE* pFile;</span><br><span class="line">    pFile = fopen(t, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> identifier;        <span class="comment">//操作</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> address;   <span class="comment">//地址</span></span><br><span class="line">    <span class="type">int</span> size;               <span class="comment">//大小</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//当文件内文本有效时，不停地读，并把地址传入update进行解析判断是否命中进行更新，还需要判断更新Lrunumber</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">fscanf</span>(pFile, <span class="string">&quot; %c %xu,%d\n&quot;</span>, &amp;identifier, &amp;address, &amp;size) &gt; <span class="number">0</span>)   </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">switch</span>(identifier)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;I&#x27;</span> :</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;L&#x27;</span> :</span><br><span class="line">                update(address);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;M&#x27;</span> :</span><br><span class="line">                update(address);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;S&#x27;</span> :</span><br><span class="line">                update(address);</span><br><span class="line">        &#125;</span><br><span class="line">        update_Lrunumber(); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//读完后关闭文件</span></span><br><span class="line">    fclose(pFile);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主函数，处理参数，进行各类函数调用</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//hit, miss, eviction初始化为0</span></span><br><span class="line">    hit = miss = eviction = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//getopt函数，具体请看用法</span></span><br><span class="line">    <span class="type">int</span> opt;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">-1</span>!=(opt = (getopt(argc,argv,<span class="string">&quot;hvs:E:b:t:&quot;</span>))))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span>(opt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;E&#x27;</span>:</span><br><span class="line">                E = atoi(optarg);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">                s = atoi(optarg);</span><br><span class="line">                S = <span class="number">1</span> &lt;&lt; s;                <span class="comment">// S=2^s</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span>:</span><br><span class="line">                b = atoi(optarg);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;t&#x27;</span>:</span><br><span class="line">                <span class="built_in">strcpy</span>(t,optarg);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span> :</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果参数不合法，直接退出</span></span><br><span class="line">    <span class="keyword">if</span>(s&lt;=<span class="number">0</span> || E&lt;=<span class="number">0</span> || b&lt;=<span class="number">0</span> || t==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    initcache();</span><br><span class="line"></span><br><span class="line">    parse_trace();</span><br><span class="line"></span><br><span class="line">    printSummary(hit, miss, eviction);</span><br><span class="line"></span><br><span class="line">    freecache();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="5-结果展示"><a href="#5-结果展示" class="headerlink" title="5.结果展示"></a><strong>5.结果展示</strong></h3><p><img src="/images/2022-05-12-01-34-59.png"></p>
]]></content>
      <categories>
        <category>csapp</category>
      </categories>
      <tags>
        <tag>csapp实验</tag>
      </tags>
  </entry>
  <entry>
    <title>异常的捕获和处理</title>
    <url>/2022/07/12/%E5%BC%82%E5%B8%B8%E7%9A%84%E6%8D%95%E8%8E%B7%E5%92%8C%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h3 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h3>]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>图的基本概念</title>
    <url>/2022/04/26/%E5%9B%BE%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<h3 id="一、图的术语和定义"><a href="#一、图的术语和定义" class="headerlink" title="一、图的术语和定义"></a>一、图的术语和定义</h3><ol>
<li>无向图<ol>
<li>无向图的边是无方向的</li>
<li>树是连通的无回路的无向图<strong>（最后一个结点不会指向根结点）</strong></li>
<li>树T有n个顶点，则<strong>必有n-1条边</strong></li>
<li>无向图的边数&#x3D;各顶点的度之和的一半</li>
</ol>
</li>
<li>有向图<ol>
<li>有向图的边是有方向的</li>
<li>多重图（哥尼斯堡七桥），简单图（不存在带环的图，同一条边不重复出现）</li>
</ol>
</li>
<li>完全图<ol>
<li>每个点都直接指向其他点，边最多</li>
<li>完全无向图（最多的边）<ol>
<li>任意两个顶点之间都存在边，则n个顶点有<em><em>n</em>(n-1)&#x2F;2</em>*条边</li>
</ol>
</li>
<li>完全有向图（最多的边）<ol>
<li>任意两个顶点之间存在方向互为相反的边，则n个顶点有*<em>n</em>(n-1)**条边</li>
</ol>
</li>
</ol>
</li>
<li>带权图（通常称为<strong>网</strong>）<ol>
<li>图的边具有权值</li>
</ol>
</li>
<li>稠密图<ol>
<li>有很少条边的图</li>
</ol>
</li>
<li>邻接顶点</li>
<li>顶点的度<ol>
<li>指与顶点关联的边数  | <strong>tips:与树的度定义不一样</strong><ol>
<li>度为0称为孤立点</li>
<li>度为1称为悬挂点</li>
</ol>
</li>
<li>有向图<ol>
<li>以结点i为<strong>起点</strong>的边数称为<strong>入度</strong></li>
<li>以结点i为<strong>终点</strong>的边数称为<strong>出度</strong></li>
</ol>
</li>
</ol>
</li>
<li>子图<ol>
<li></li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>图</tag>
      </tags>
  </entry>
  <entry>
    <title>异常的发生过程</title>
    <url>/2022/04/23/%E5%BC%82%E5%B8%B8%E6%8E%A7%E5%88%B6%E6%B5%81/</url>
    <content><![CDATA[<blockquote>
<p>CPU的组成，其中RIP指令寄存器存放下一条执行的指令</p>
</blockquote>
<p><img src="/images/2022-04-23-10-57-43.png"></p>
<h3 id="1-下面是一个异常的发生过程图示"><a href="#1-下面是一个异常的发生过程图示" class="headerlink" title="1. 下面是一个异常的发生过程图示"></a>1. 下面是一个异常的发生过程图示</h3><p><img src="/images/1.png"></p>
<blockquote>
<p>异常表（exception table）<strong>【存放在DRAM，只可读】</strong>就像一个字典一样，标记[0]是发生什么事情，[1]是发生什么事情…..，比如说[0]是除0了，发生异常之后往哪里跳转，需要查这个表，CPU告诉我们RIP要去查表了，看跳转到哪里，RIP就会跳转到内核的目标位置向上执行</p>
</blockquote>
<blockquote>
<p>下条指令本来是希望指向I4, 由于发生page fault<strong>【页表没法查询到这个东西】</strong>，%RIP跳转到内核态，这时RIP不是指向下条指令，这时称发生了异常</p>
</blockquote>
<blockquote>
<p>ISA：call，ret，jump系列<strong>【都是跳转，都是用户态指令，始终在.text段，或者其他共享库的.text段去跳，它不会超过kernel和user的上限，而异常不一样，异常是从用户态转到内核态】</strong></p>
</blockquote>
<hr>
<h3 id="2-下面展示发生控制转移的过程"><a href="#2-下面展示发生控制转移的过程" class="headerlink" title="2. 下面展示发生控制转移的过程"></a>2. 下面展示发生控制转移的过程</h3><p>   <img src="/images/2022-04-23-12-04-14.png"></p>
<blockquote>
<p>可以发现，和正常的用户态跳转指令是不一样的，<strong>主要是从用户态到内核态的转变</strong></p>
</blockquote>
<hr>
<h3 id="3-CPU的执行过程"><a href="#3-CPU的执行过程" class="headerlink" title="3. CPU的执行过程"></a>3. CPU的执行过程</h3><blockquote>
<ol>
<li><strong>取址</strong>，从RIP取址，因为RIP是va（虚拟地址），通过MMU换算成pa（物理地址），pa去查cache，L1如果命中了，就传回指令，如果不命中，就去查主存</li>
<li><strong>译码</strong>，ALU（算数逻辑单元）去Decode，比如将 48 89 d3 转换成 mov %rdx,%rbx</li>
<li><strong>执行</strong>，Execute：CPU在寄存器组，将rbx内的东西放到rdx</li>
<li><strong>访存</strong>，Memory：指令如果有[]，会进行内存访问，经过内存总线，首先访问datacache，L1-&gt;L2-&gt;L3-&gt;DRAM</li>
<li><strong>写回</strong>，Write：写回给寄存器</li>
</ol>
</blockquote>
<p><img src="/images/2022-04-23-13-10-31.png"></p>
<blockquote>
<p>如果第一条指令的E希望发生一个系统调用，就会比如把中断控制器设置的某个位设置为1，CPU在执行下条指令之前去检查中断控制器，有个位是1，就知道是要发生系统调用&#x2F;异常&#x2F;缺页等等，这个时候就不会去执行下条指令，这个时候控制发生转移</p>
</blockquote>
<blockquote>
<p><strong>同步异常</strong>：返回给可能当前指令【故障】，或总是下条指令【陷阱】，或终止被中断的程序，不会返回【终止】<br>    1. 故障【fault】：mov指令出问题，div by zero<br>    2. 陷阱【trap】：主动执行int，syscall指令，iret指令<br>    3. 终止【abort】：直接挂掉，比如直接访问null</p>
</blockquote>
<blockquote>
<p><strong>异步异常</strong>：还有一种是来自I&#x2F;O设备的异步异常【中断】，它是<strong>和上条指令没有关系的</strong>，所以<strong>总是返回到下一条指令</strong><br>可能来自I&#x2F;O的操作：鼠标，键盘，磁盘，网络传过来的数据发生异常等等</p>
</blockquote>
]]></content>
      <categories>
        <category>csapp</category>
      </categories>
      <tags>
        <tag>异常控制流</tag>
      </tags>
  </entry>
  <entry>
    <title>算法定义及复杂度</title>
    <url>/2022/04/19/%E7%AE%97%E6%B3%95%E5%AE%9A%E4%B9%89%E5%8F%8A%E5%A4%8D%E6%9D%82%E5%BA%A6/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>复杂度</tag>
      </tags>
  </entry>
  <entry>
    <title>栈的基本概念</title>
    <url>/2022/04/19/%E6%A0%88%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title>系统级I/O</title>
    <url>/2022/04/21/%E7%B3%BB%E7%BB%9F%E7%BA%A7IO/</url>
    <content><![CDATA[<h2 id="一、UNIT-I-x2F-O"><a href="#一、UNIT-I-x2F-O" class="headerlink" title="一、UNIT I&#x2F;O"></a>一、UNIT I&#x2F;O</h2><p>不带缓存，直接操作<br>网络通信和信号处理程序输出【标准C库不能做】</p>
<ol>
<li>open</li>
</ol>
<h2 id="二、标准C库I-x2F-O"><a href="#二、标准C库I-x2F-O" class="headerlink" title="二、标准C库I&#x2F;O"></a>二、标准C库I&#x2F;O</h2><p>带缓存</p>
<ol>
<li>fopen</li>
</ol>
]]></content>
      <categories>
        <category>csapp</category>
      </categories>
      <tags>
        <tag>系统级I/O</tag>
      </tags>
  </entry>
  <entry>
    <title>树基本概念</title>
    <url>/2022/04/17/%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<h2 id="一、树的定义"><a href="#一、树的定义" class="headerlink" title="一、树的定义"></a>一、树的定义</h2><ol>
<li><p>树（Tree）是n个结点的有限集，n&#x3D;0时为空树，n&gt;0时，有且只有一个根结点（Root），其它结点为根的子树。</p>
<blockquote>
<p><strong>n&gt;0时根是唯一的</strong><br><strong>子树互不相交</strong><br><strong>非线性结构</strong></p>
</blockquote>
</li>
<li><p>数的基本术语</p>
<ol>
<li>结点的度<ol>
<li>结点拥有的子树的个数</li>
<li>度为0的称为叶结点</li>
<li>树的度是<strong>各结点的度的最大值</strong></li>
</ol>
</li>
<li>结点之间的关系<ol>
<li>结点的子树称为<strong>孩子</strong>，该结点称为<strong>双亲</strong></li>
<li>同一个双亲的孩子之间互称兄弟</li>
<li>祖先是<strong>从根到该结点的所有结点</strong>，祖先不一定唯一</li>
</ol>
</li>
<li>结点的层次<ol>
<li>根在第一层</li>
<li><strong>双亲在同一层的结点互为堂兄弟</strong></li>
<li>最大层次称为树的深度</li>
</ol>
</li>
<li>森林<ol>
<li><strong>互不相交</strong>的树的集合</li>
</ol>
</li>
</ol>
</li>
</ol>
<hr>
<h2 id="二、数的存储结构"><a href="#二、数的存储结构" class="headerlink" title="二、数的存储结构"></a>二、数的存储结构</h2><ol>
<li>双亲表示法</li>
<li>孩子表示法</li>
<li>孩子兄弟表示法</li>
</ol>
<hr>
<h2 id="三、树、森林、二叉树的转换"><a href="#三、树、森林、二叉树的转换" class="headerlink" title="三、树、森林、二叉树的转换"></a>三、树、森林、二叉树的转换</h2><ol>
<li>数转换为二叉树</li>
<li>森林转换为二叉树</li>
<li>二叉树转换为树</li>
<li>二叉树转换为森林</li>
</ol>
<hr>
<h2 id="四、树与森林的遍历"><a href="#四、树与森林的遍历" class="headerlink" title="四、树与森林的遍历"></a>四、树与森林的遍历</h2>]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>概念</tag>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库基础</title>
    <url>/2022/07/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h3 id="〇、基础概念"><a href="#〇、基础概念" class="headerlink" title="〇、基础概念"></a>〇、基础概念</h3><ul>
<li><p>数据（DATA）</p>
<ul>
<li>描述客户事物及其状态的符号记录（最原始的记录，未做加工）</li>
</ul>
</li>
<li><p>数据库（DATABASE）DB</p>
<ul>
<li>长期储存在计算机内，有组织的，可共享的大量数据的集合</li>
<li>无冗余性：现实最多有一份数据与之对应</li>
</ul>
</li>
<li><p>数据库管理系统（DATABASE MANAGEMENT SYSTEM）DBMS</p>
<ul>
<li>一种计算机应用软件程序，用于创建和管理数据；与用户、其他应用程序及数据库进行交互以获取，管理和分析数据</li>
<li>有故障恢复机制</li>
</ul>
</li>
<li><p>数据库系统（DATABASE SYSTEM）DBS</p>
<ul>
<li>包括5个部分<ul>
<li>1.数据库<ul>
<li>数据集合</li>
</ul>
</li>
<li>2.数据库管理系统（核心）<ul>
<li>负责数据库的规划，设计，协调，维护和管理</li>
</ul>
</li>
<li>3.应用程序</li>
<li>4.数据库管理员</li>
<li>5.用户<ul>
<li>应用程序开发人员<ul>
<li>程序猿，编写程序通过DBMS发出SQL请求</li>
</ul>
</li>
<li>最终用户<ul>
<li>通过程序访问数据库</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>T-SQL（transact structured query langage）【结构化查询语言增强版】</p>
<ul>
<li>流程控制、存储过程、触发器、游标、函数</li>
<li>T-SQL服务器端编程：提高代码可重用性、减轻客户端的负担、减少网络负担</li>
<li>全局&#x2F;局部变量定义：DECLARE @@变量名 数据类型（长度）&#x2F;DECLARE @变量名 数据类型（长度）;</li>
<li>赋初值：SET @变量名 &#x3D; 表达式;</li>
<li>不能同时对多个变量进行赋值；</li>
</ul>
</li>
<li><p>三范式</p>
<ul>
<li>1.列不可拆分</li>
<li>2.唯一标识</li>
<li>3.引用主键</li>
</ul>
</li>
</ul>
<h3 id="一、概念模型设计E-R图"><a href="#一、概念模型设计E-R图" class="headerlink" title="一、概念模型设计E-R图"></a>一、概念模型设计E-R图</h3><h3 id="二、sql结构化语言进行数据库、表设计"><a href="#二、sql结构化语言进行数据库、表设计" class="headerlink" title="二、sql结构化语言进行数据库、表设计"></a>二、sql结构化语言进行数据库、表设计</h3><p>1、按要求：创建数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">	<span class="keyword">create</span> database qimo</span><br><span class="line"><span class="keyword">on</span> <span class="keyword">primary</span></span><br><span class="line">(</span><br><span class="line">  name <span class="operator">=</span> lianxi,            <span class="comment">--逻辑名</span></span><br><span class="line">  filename <span class="operator">=</span> <span class="string">&#x27;D:\软工综合\数据库原理\期末\qimolianxi.mdf&#x27;</span>,   <span class="comment">--路径及物理名</span></span><br><span class="line">  size <span class="operator">=</span> <span class="number">5</span>mb,</span><br><span class="line">  maxsize <span class="operator">=</span> unlimited,</span><br><span class="line">  filegrowth <span class="operator">=</span> <span class="number">10</span><span class="operator">%</span></span><br><span class="line">)</span><br><span class="line">log <span class="keyword">on</span></span><br><span class="line">(</span><br><span class="line">  name <span class="operator">=</span> lianxi_log,</span><br><span class="line">  filename <span class="operator">=</span> <span class="string">&#x27;D:\软工综合\数据库原理\期末\qimolianxi.ldf&#x27;</span>,</span><br><span class="line">  size <span class="operator">=</span> <span class="number">5</span>mb</span><br><span class="line">)</span><br><span class="line">  <span class="keyword">Drop</span> database qimo   <span class="comment">--删除数据库语句</span></span><br></pre></td></tr></table></figure>

<p>2、按要求：创建数据表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">	use qimo</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student</span><br><span class="line">(</span><br><span class="line">	s_id <span class="type">char</span>(<span class="number">12</span>) <span class="keyword">primary</span> key,</span><br><span class="line">	s_name <span class="type">char</span>(<span class="number">8</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">	s_sex <span class="type">char</span>(<span class="number">2</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">check</span> (s_sex <span class="keyword">in</span>(<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;女&#x27;</span>)),  <span class="comment">--check 范围,可以设置大于0或限定只能是什么</span></span><br><span class="line">	s_birth datetime <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">	s_addr <span class="type">varchar</span>(<span class="number">80</span>),</span><br><span class="line">	s_entrancetime datetime <span class="keyword">default</span> getdate(),  <span class="comment">--default 默认值，可以设置常数或系统时间函数</span></span><br><span class="line">	<span class="comment">--s_classid char(8) references class(classid), --references 外键，将class表中的classid作为外键，这里未创class表</span></span><br><span class="line">	                                             <span class="comment">--primary key(courseid,studentid),联合主键用法</span></span><br><span class="line">)</span><br><span class="line">   <span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">add</span> s_class <span class="type">char</span>(<span class="number">8</span>) <span class="keyword">not</span> <span class="keyword">null</span>  <span class="comment">--插入新列</span></span><br><span class="line">   <span class="keyword">drop</span> <span class="keyword">table</span> student     <span class="comment">--删除表</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="三、sql语法"><a href="#三、sql语法" class="headerlink" title="三、sql语法"></a>三、sql语法</h3><ul>
<li><p>1、单表查询</p>
<ul>
<li><p>Order by:  按一个或多个属性列排序，ASC升序，DESC降序，默认升序</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">order</span> <span class="keyword">by</span> sdept,sbirthday <span class="keyword">DESC</span>  <span class="comment">--按系号升序排，同系的按生日降序排</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Top x :表示选择的行数</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> top <span class="number">2</span> sno <span class="keyword">from</span> student  <span class="comment">--查询最前面2个学生学号信息</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Distinct:取消重复的行</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="keyword">distinct</span> sno <span class="keyword">from</span> score</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询计算过的值：</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">数值类型：<span class="keyword">Select</span> sname,<span class="number">2016</span><span class="operator">-</span><span class="keyword">year</span>(sbirthday) <span class="keyword">as</span> sage <span class="keyword">from</span> student   <span class="comment">--输出名字和年龄（当前年份减出生年份）</span></span><br></pre></td></tr></table></figure>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">字符类型：<span class="keyword">select</span> sname<span class="operator">+</span>ssex <span class="keyword">as</span> name_sex <span class="keyword">from</span> student   <span class="comment">--王小二男</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>字符串函数：</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">datalength(‘abc’) 返回 <span class="number">3</span>   <span class="comment">--字符串长度</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Right</span><span class="operator">/</span><span class="keyword">left</span>(‘张三丰’，<span class="number">1</span>) 返回 “张”  <span class="comment">--返回字符串最右/左第N个字符</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>算数函数</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">power</span>(<span class="number">3</span>,<span class="number">2</span>)返回 <span class="number">9</span></span><br><span class="line">```    </span><br><span class="line">```<span class="keyword">sql</span></span><br><span class="line">round(<span class="number">2.56789</span>,<span class="number">2</span>)返回 <span class="number">2.57</span>  <span class="comment">--返回小数点后第N位</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sqrt</span>(<span class="number">2</span>)返回 <span class="number">1.4142135623731</span>   <span class="comment">--返回X的平方根</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>日期函数</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">getdate() 返回当前日期</span><br><span class="line"><span class="keyword">Year</span><span class="operator">/</span><span class="keyword">Month</span><span class="operator">/</span><span class="keyword">day</span>（date_expr）获取date_expr的年份<span class="operator">/</span>月份<span class="operator">/</span>日期</span><br></pre></td></tr></table></figure>
</li>
<li><p>聚集函数</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"> count（<span class="operator">*</span>）</span><br><span class="line"><span class="keyword">Select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> student <span class="comment">--查询学生总人数</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Sum</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">Select</span> <span class="built_in">sum</span>(grade) <span class="keyword">from</span> score <span class="comment">--查询所有学生所有课程分数</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Avg</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">Select</span> <span class="built_in">avg</span>(grade) <span class="keyword">from</span> score  <span class="comment">--计算学生所有课程的平均成绩</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Max<span class="operator">/</span><span class="built_in">Min</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">Select</span> max<span class="operator">/</span><span class="built_in">min</span>(grade) <span class="keyword">from</span> student  <span class="comment">--查询学生最高分数</span></span><br></pre></td></tr></table></figure></li>
<li><p>Where条件查询</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">Between</span>…<span class="keyword">and</span>…</span><br><span class="line"><span class="keyword">Select</span> sname <span class="keyword">from</span> student <span class="keyword">where</span> sage <span class="keyword">not</span> <span class="keyword">between</span> <span class="number">20</span> <span class="keyword">and</span> <span class="number">25</span>;   <span class="comment">--查询不是20到25岁之间的学生姓名</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">In</span></span><br><span class="line"><span class="keyword">Select</span> sname <span class="keyword">from</span> student <span class="keyword">where</span> sdept <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">&#x27;IS&#x27;</span>,<span class="string">&#x27;MA&#x27;</span>,<span class="string">&#x27;CS&#x27;</span>);  <span class="comment">--查询既不是计算机系，也不是数学系，也不是信息系的学生姓名</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">Like</span></span><br><span class="line"> <span class="operator">%</span>:代表任意长度的字符串</span><br><span class="line"><span class="keyword">Select</span> sname,sno <span class="keyword">from</span>  student <span class="keyword">where</span> sname <span class="keyword">not</span> <span class="keyword">like</span> <span class="string">&#x27;刘%&#x27;</span>   <span class="comment">--查询不是姓刘的学生的姓名和学号</span></span><br><span class="line"> _:代表任意单个字符</span><br><span class="line"><span class="keyword">Select</span> sname,sno <span class="keyword">from</span> student <span class="keyword">where</span> sname <span class="keyword">like</span> <span class="string">&#x27;_阳%&#x27;</span>  <span class="comment">--查询名字第二个字是阳的学生的姓名和学号</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">IS</span></span><br><span class="line"><span class="keyword">Select</span> sno,cno <span class="keyword">from</span> score <span class="keyword">where</span> grade <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>   <span class="comment">--查询分数不为空的学生的学号和课程号</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Not</span><span class="operator">&gt;</span><span class="keyword">and</span><span class="operator">&gt;</span><span class="keyword">or</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>2、分组查询</p>
<ul>
<li>Group by  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> s_id,<span class="built_in">sum</span>(s_score) <span class="keyword">from</span> score <span class="keyword">group</span> <span class="keyword">by</span> s_id  <span class="comment">--查询每个学生所有课程的总分</span></span><br></pre></td></tr></table></figure></li>
<li>Having  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> s_id,<span class="built_in">sum</span>(s_score) <span class="keyword">from</span> score <span class="keyword">group</span> <span class="keyword">by</span> s_id <span class="keyword">having</span> <span class="built_in">sum</span>(s_score) <span class="operator">&gt;=</span> <span class="number">200</span>   <span class="comment">--查询所有课程的总分超过200分的学生</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>3、多表查询</p>
<ul>
<li>等值连接略</li>
<li>非等值连接  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> a.yname, a.jxj, b.sno, b.cno, b.grade <span class="keyword">from</span> jxj a, score b <span class="keyword">where</span> b.grade <span class="keyword">between</span> a.grade_min <span class="keyword">and</span> a.grade_max     <span class="comment">--从分数表的分数中查询符合奖学金不同奖项分数的学生获奖情况</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> a.sno,a.sname <span class="keyword">from</span> student a, score b <span class="keyword">where</span> a.sno <span class="operator">=</span> b.sno <span class="keyword">and</span> b.cno <span class="operator">=</span> <span class="string">&#x27;2&#x27;</span> <span class="keyword">and</span> b.grade <span class="operator">&gt;</span> <span class="number">90</span>   <span class="comment">--查询选修2号课程且分数大于90的学生学号和姓名</span></span><br></pre></td></tr></table></figure></li>
<li>自身连接  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> first.cno,second.cpno <span class="keyword">from</span> course <span class="keyword">first</span>,course <span class="keyword">second</span> <span class="keyword">where</span> first.cpno <span class="operator">=</span> second.cno  <span class="comment">--查询每一门课的间接先修课</span></span><br></pre></td></tr></table></figure></li>
<li>外连接  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Join</span>…<span class="keyword">on</span></span><br><span class="line">表 <span class="keyword">Left</span> <span class="keyword">join</span> 表 <span class="keyword">on</span>  <span class="comment">--列出左边关系中的所有元组</span></span><br><span class="line">表 <span class="keyword">right</span> <span class="keyword">join</span> 表 <span class="keyword">on</span>  <span class="comment">--列出右边关系中的所有元组</span></span><br></pre></td></tr></table></figure></li>
<li>多表连接  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> student.sno, sname, cname, grade <span class="keyword">from</span> student, score, course <span class="keyword">where</span> student.sno <span class="operator">=</span> score.sno <span class="keyword">and</span> score.cno <span class="operator">=</span> course.cno    <span class="comment">--查询每个学生的学号，姓名，选修的课程名及成绩</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>4、子查询</p>
<ul>
<li>集合查询<ul>
<li>并（union）<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> sno <span class="keyword">from</span> score <span class="keyword">where</span> cno <span class="operator">=</span> <span class="number">2</span> <span class="keyword">union</span> <span class="keyword">all</span> (<span class="keyword">select</span> sno <span class="keyword">from</span> score <span class="keyword">where</span> cno <span class="operator">=</span> <span class="number">3</span>)  <span class="comment">--查询选修了课程号为2和3的学号  （没有all则去掉重复内容）</span></span><br></pre></td></tr></table></figure></li>
<li>交（intersect）<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> sex<span class="operator">=</span><span class="string">&#x27;男&#x27;</span> <span class="keyword">intersect</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> sdept<span class="operator">=</span><span class="string">&#x27;CS&#x27;</span>   <span class="comment">--查询计算机系的男生的信息</span></span><br></pre></td></tr></table></figure></li>
<li>差（except）【在第一个结果集中，但是不在第二个结果集】<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">（<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> sdept <span class="operator">!=</span><span class="string">&#x27;CS&#x27;</span>）<span class="keyword">except</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> sex <span class="operator">=</span><span class="string">&#x27;男&#x27;</span>   <span class="comment">--查询非计算机系的非男生信息</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>嵌套查询<ul>
<li>子查询不能使用compute[by] 和 into子句</li>
<li>子查询的select语句不能使用image、text和ntext数据类型</li>
<li>带IN的嵌套查询  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> sdept <span class="keyword">in</span> (<span class="keyword">select</span> sdept <span class="keyword">from</span> student <span class="keyword">where</span> sname <span class="operator">=</span> <span class="string">&#x27;王敏&#x27;</span>)   <span class="comment">--查询与王敏同系的所有学生信息</span></span><br></pre></td></tr></table></figure></li>
<li>带比较的<ul>
<li>§ &gt;, &lt;  &#x3D;</li>
</ul>
</li>
<li>带any 或 all 的嵌套查询<ul>
<li>§ &lt;, &gt; ,&lt;&gt;  –不等于子查询中的任何一个值&#x2F;某个值</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>5、插入新记录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use qimo</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span> (<span class="string">&#x27;101&#x27;</span>,<span class="string">&#x27;王小二&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;2000-10-01&#x27;</span>,<span class="string">&#x27;广东佛山狮山大道碧海湾2栋1001&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>6、更新数据库数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> student <span class="keyword">set</span> s_entrancetime <span class="operator">=</span> <span class="string">&#x27;2022-01-05&#x27;</span> <span class="keyword">where</span> s_id <span class="operator">=</span> <span class="string">&#x27;101&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li><p>7、删除特定数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> student <span class="keyword">where</span> s_id <span class="operator">=</span> <span class="string">&#x27;101&#x27;</span>     <span class="comment">--删除数据是以行为单位</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>SQL语法</tag>
      </tags>
  </entry>
  <entry>
    <title>双向链表的基本概念</title>
    <url>/2022/04/19/%E7%BA%BF%E6%80%A7%E8%A1%A8-%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>线性表</tag>
        <tag>双向链表</tag>
      </tags>
  </entry>
  <entry>
    <title>循环链表的基本概念</title>
    <url>/2022/04/19/%E7%BA%BF%E6%80%A7%E8%A1%A8-%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>线性表</tag>
        <tag>循环链表</tag>
      </tags>
  </entry>
  <entry>
    <title>链表的基本概念</title>
    <url>/2022/04/19/%E7%BA%BF%E6%80%A7%E8%A1%A8-%E9%93%BE%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>线性表</tag>
        <tag>单链表</tag>
      </tags>
  </entry>
  <entry>
    <title>数组的基本概念</title>
    <url>/2022/04/19/%E7%BA%BF%E6%80%A7%E8%A1%A8-%E6%95%B0%E7%BB%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>线性表</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>静态链表的基本概念</title>
    <url>/2022/04/19/%E7%BA%BF%E6%80%A7%E8%A1%A8-%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>线性表</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>高速缓存的概念</title>
    <url>/2022/04/25/%E9%AB%98%E9%80%9F%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<h3 id="一、局部性"><a href="#一、局部性" class="headerlink" title="一、局部性"></a>一、局部性</h3><ol>
<li>时间局部性<br>指的是被引用的内存位置，很可能在<strong>不远的将来再被多次引用</strong></li>
<li>空间局部性<br>指的是被引用的内存位置，很可能在不远的将来引用<strong>附近的一个内存位置</strong></li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sumarrayrows</span><span class="params">(<span class="type">int</span> a [M][N])</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="type">int</span> i, j, sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; M; i++&gt;)</span><br><span class="line">      <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; N; j++&gt;)</span><br><span class="line">         sum += a[i][j];</span><br><span class="line">   <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这是一个具有良好局部性的程序，sum每次迭代都被引用，具有良好时间局部性，a[i][j]每次引用附近的元素（步长为1），具有良好空间局部性</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sumarrayrcols</span><span class="params">(<span class="type">int</span> a [M][N])</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="type">int</span> i, j, sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; N; j++&gt;)</span><br><span class="line">      <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; M; i++&gt;)</span><br><span class="line">         sum += a[i][j];</span><br><span class="line">   <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这是空间局部性很差的程序，sum依然具有良好时间局部性，但是a[i][j]每次引用附近步长为N的元素，空间局部性很差</p>
</blockquote>
<ol start="3">
<li>总结<blockquote>
<p>1.重复引用相同变量的程序具有良好的时间局部性，如上面的sum这个变量<br>2.步长越小，空间局部性越好，步长大，跳来跳去的程序空间局部性很差<br>3.对于取指令来说，循环有好的时间和空间局部性，循环体越小，循环迭代次数越多，局部性越好</p>
</blockquote>
</li>
</ol>
<hr>
<h3 id="二、什么是缓存"><a href="#二、什么是缓存" class="headerlink" title="二、什么是缓存"></a>二、什么是缓存</h3><blockquote>
<p>缓存：内存的缓冲区域</p>
</blockquote>
<ol>
<li>缓存的本质<ol>
<li>和硬盘一样，<strong>存储数据和指令</strong></li>
<li>区别在于<strong>读取速度的不同</strong></li>
</ol>
</li>
</ol>
<blockquote>
<p>问：为什么需要缓存？<br>答：程序存储在内存但每次从内存中取出指令需要10万个时钟周期，造成资源浪费，所以引出缓存这个东西</p>
</blockquote>
<ol start="2">
<li>缓存的作用<ol>
<li>在CPU和内存之间添加缓存</li>
<li>容量小，只用来存储CPU执行常用的指令</li>
</ol>
</li>
</ol>
<p><img src="/images/2022-04-25-23-17-15.png" alt="存储器层次结构" title="存储器层次结构"></p>
<hr>
<h3 id="三、缓存相关名词"><a href="#三、缓存相关名词" class="headerlink" title="三、缓存相关名词"></a>三、缓存相关名词</h3><p><em>当程序需要数据块10时</em>，有以下几种情况</p>
<ol>
<li><p>缓存命中</p>
<ol>
<li>缓存中有数据块10，则<strong>直接返回给CPU</strong>，这叫做<strong>缓存命中</strong><br><img src="/images/2022-04-27-00-26-36.png"></li>
</ol>
</li>
<li><p>缓存不命中</p>
<ol>
<li><p>缓存行（k层）中有数据块，但没有10，这叫做<strong>缓存不命中</strong>，此时缓存从下一层（k+1层）中复制数据块到缓存行中替换一个现有的数据块（如果k+1没有就继续往下一层找），并保持在那里，等待稍后的访问</p>
<blockquote>
<p><strong>最近最少被使用替换策略（LRU）</strong>，会选择很长时间都没有或很少使用的块，可以思考下LRU是怎么实现的<br><img src="/images/2022-04-27-00-35-48.png"></p>
</blockquote>
</li>
<li><p>缓存行（k层）中为空，这叫做<strong>冷不命中</strong>，从下一层中复制数据块到缓存行</p>
<blockquote>
<p>那么从下一层中取出的块放在哪呢？<br>答：<strong>放置策略</strong>，最常用的是第k+1层的块i必须放在第k层的块（i mod 4）中。比如，第k+1层的0,4,8,12会映射到第k层的块0。块1,5,9,13会映射到块1。<br><img src="/images/2022-04-27-00-48-29.png"></p>
</blockquote>
</li>
</ol>
</li>
<li><p>冲突不命中</p>
<ol>
<li><p>上述的放置策略会引起一个问题，就是<strong>冲突不命中</strong></p>
<blockquote>
<p>1.首先0，4，8，12都是映射到块0的<br>2.如果我请求块0，然后第一次不命中，然后将0放置到块0上<br>3.然后我请求块4，然后第二次不命中，因为4和0映射到同一个块上，4会替换0<br>4.然后我再请求0，这时发生第三次不命中，因为块0现在是4，这时0又会替换4</p>
</blockquote>
</li>
<li><p>即使缓存总共可以容纳4个块甚至更多，但因为0，4，8，12被映射到同一个块，它不能分散去其他块，如果我请求的都是这个块里的对象，就会产生冲突，因为会每次都不命中，它只在一个缓存块里替换、使用</p>
</li>
</ol>
</li>
<li><p>容量不命中</p>
<ol>
<li>工作集的大小超过缓存大小时，缓存会经历<strong>容量不命中</strong><blockquote>
<p>缓存太小了，不能处理这个工作集</p>
</blockquote>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>csapp</category>
      </categories>
      <tags>
        <tag>存储器层次结构</tag>
      </tags>
  </entry>
  <entry>
    <title>虚拟内存</title>
    <url>/2022/05/16/%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<p>先映射到物理内存，之后分配给程序使用</p>
<p>虚拟内存提供了三个重要的能力：<br>一、虚拟内存将主存看成是一个存储在磁盘上的地址空间的高速存储，在主存中只保存活动区域，并根据需要在磁盘和主存之间来回传送数据，通过这种方式，虚拟内存高效使用主存；二、虚拟内存为每个进程提供了一致的地址空间，从而简化了内存管理；三、虚拟内存保护了每个进程的地址空间不被其他进程破坏。</p>
<h3 id="一、物理内存和虚拟内存"><a href="#一、物理内存和虚拟内存" class="headerlink" title="一、物理内存和虚拟内存"></a>一、物理内存和虚拟内存</h3><h3 id="二、Linux虚拟内存-amp-内存映射"><a href="#二、Linux虚拟内存-amp-内存映射" class="headerlink" title="二、Linux虚拟内存&amp;内存映射"></a>二、Linux虚拟内存&amp;内存映射</h3><p>liunx为每个进程维护一个单独的虚拟地址空间</p>
<h3 id="三、动态内存分配"><a href="#三、动态内存分配" class="headerlink" title="三、动态内存分配"></a>三、动态内存分配</h3><p>动态内存分配器（对堆的管理，从堆里面划分区域，一定是连续的）维护着一个进程的虚拟内存区域，称为堆（heap）。紧接未初始化的数据区域后面开始向上（高地址增长）。对于每一个进程，内核维护者一个变量brk（break），它指向堆的顶部。<br>显式分配器：malloc函数 和 free函数<br>隐式分配器：也叫做垃圾收集器，自动释放不再使用的块，例如java</p>
<p>要考虑数据对齐<br>32位malloc返回8的倍数（long是8字节），64位返回16的倍数（long是16字节）<br>为什么要对齐？<br>不知道要存放什么数据，最坏打算：任何数据（最大的数据类型），保证了你的缓存<br>L1和L2是以块来通信，一个long（8个字节）的数据，不能存在于两个块，数据的存储是一个完整的数据，不能跨块或跨页保存（否则出现加载一个块可能不满足获取数据要求）</p>
<p>释放<br>不是清空，是标记为空闲，可以再次使用，再次使用时需要初始化</p>
]]></content>
      <categories>
        <category>csapp</category>
      </categories>
      <tags>
        <tag>虚拟内存</tag>
      </tags>
  </entry>
  <entry>
    <title>队列的基本概念</title>
    <url>/2022/04/19/%E9%98%9F%E5%88%97%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>概念</tag>
        <tag>队列</tag>
      </tags>
  </entry>
  <entry>
    <title>赫夫曼树</title>
    <url>/2022/04/19/%E8%B5%AB%E5%A4%AB%E6%9B%BC%E6%A0%91/</url>
    <content><![CDATA[<h2 id="一、赫夫曼树的定义"><a href="#一、赫夫曼树的定义" class="headerlink" title="一、赫夫曼树的定义"></a>一、赫夫曼树的定义</h2><blockquote>
<p>没有度为1的结点，只有度为0或2的结点</p>
</blockquote>
<hr>
<h2 id="二、赫夫曼编码"><a href="#二、赫夫曼编码" class="headerlink" title="二、赫夫曼编码"></a>二、赫夫曼编码</h2>]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>高速缓存存储器</title>
    <url>/2022/04/26/%E9%AB%98%E9%80%9F%E7%BC%93%E5%AD%982/</url>
    <content><![CDATA[<h3 id="一、高速缓存存储器组织结构"><a href="#一、高速缓存存储器组织结构" class="headerlink" title="一、高速缓存存储器组织结构"></a>一、高速缓存存储器组织结构</h3><blockquote>
<p>CPU首先在缓存查找数据–&gt; L1 –&gt; L2 –&gt; L3 –&gt; 主存，这里我们假设，CPU和主存之间只有一个L1高速缓存</p>
</blockquote>
<ol>
<li><p>高速缓存存储器结构<br><img src="/images/2022-04-27-01-16-42.png"></p>
<blockquote>
<p>我们可以将高速缓存存储器视为有S &#x3D; 2^s个高速缓存组的数组。每个组包含E &#x3D; 2^e个高速缓存行。每个行是由一个B &#x3D; 2^b个字节的数据块组成的。</p>
</blockquote>
</li>
<li><p>高速缓存行结构<br><img src="/images/2022-04-27-01-28-21.png"></p>
<blockquote>
<p>高速缓存的大小（或容量）C指的是所有块的大小的和。<em><strong>标记位和有效位不包括在内</strong></em> 。因此，<strong>C&#x3D;S×E×B</strong>。</p>
</blockquote>
</li>
<li><p>地址位结构<br><img src="/images/2022-04-27-09-34-55.png"></p>
<blockquote>
<p>每个高速缓存存储器有m位，可以组成M &#x3D; 2^m个不同的地址，<strong>m &#x3D; t + s + b</strong></p>
</blockquote>
</li>
<li><p>硬件读取高速缓存的过程<br><img src="/images/2022-04-27-22-28-27.png"></p>
<blockquote>
<p>判断是否发生命中</p>
<ol>
<li>组选择：通过<strong>组索引位</strong>找到对应组</li>
<li>判断该组<strong>有效位是否为1</strong>，1为有效说明命中，0为无效说明不命中</li>
<li>有效位为1，且<strong>高速缓存行标记位等于地址位中的标记位相匹配</strong>，说明目标的副本确实在这一行</li>
</ol>
</blockquote>
</li>
</ol>
<blockquote>
<p>如果缓存不命中，CPU会进行等待，高速缓存会向主存请求目标数据块，高速缓存会保存该数据块到行中，然后再取出目标数据块给CPU</p>
</blockquote>
<hr>
<h3 id="二、直接映射高速内存"><a href="#二、直接映射高速内存" class="headerlink" title="二、直接映射高速内存"></a>二、直接映射高速内存</h3><ol>
<li><p>直接映射高速缓存（E&#x3D;1），每组只有1行，假设高速缓存块有8字节<br><img src="/images/2022-04-27-23-09-01.png"></p>
<blockquote>
<p>上图显示了缓存命中时的字选择，如果缓存不命中，就需要从存储器的下一层取出目标块进行<strong>替换&#x2F;驱逐</strong></p>
</blockquote>
</li>
<li><p>直接映射高速缓存的缺点：冲突不命中</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span> <span class="title function_">dotprod</span><span class="params">(<span class="type">float</span> x[<span class="number">8</span>], <span class="type">float</span> y[<span class="number">8</span>])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> sum = <span class="number">0.0</span>;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++&gt;)</span><br><span class="line">        sum += x[i] * y[i];</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这是一个具有良好局部性的程序，但是我们来研究一下它的命中率</p>
</blockquote>
</li>
</ol>
<p>假设浮点数是4个字节，x被加载到从地址0开始到32字节的连续内存中，y跟在后面，假设一个块是16字节，高速缓存由2个组组成，既（S,E,B,m）&#x3D; (2, 1, 16, 32)</p>
<p><img src="/images/2022-04-28-00-41-38.png"></p>
<blockquote>
<p>可以看到，x0到x3和y0到y3，x4到x7和y4到y7都被映射到了同一组，说明在程序运行时，x和y会不断进行<strong>替换&#x2F;驱逐</strong>，命中率为0，这种冲突不命中称为<strong>抖动</strong><br>上述说明了即使程序本身有良好的空间局部性，高速缓存也有足够的空间，也是会导致冲突不命中的，因为我们需要引用的块被映射到同一个组</p>
</blockquote>
<p><em><strong>那么如何修正呢？</strong></em></p>
<blockquote>
<p>比如，将x定义为float x[12]，y依然跟在x后面，这里不写出x8到x11，此时图如下</p>
</blockquote>
<p><img src="/images/2022-04-28-00-59-51.png"></p>
<blockquote>
<p>可以看到，这样就消除了抖动，但是第一次加载时还是会有2次<strong>冷不命中</strong>，第一次替换时会有2次<strong>缓存不命中</strong>，所以命中率是十六分之十二，也就是四分之三</p>
</blockquote>
<hr>
<h3 id="三、组相联高速内存"><a href="#三、组相联高速内存" class="headerlink" title="三、组相联高速内存"></a>三、组相联高速内存</h3><h3 id="四、全相联高速内存"><a href="#四、全相联高速内存" class="headerlink" title="四、全相联高速内存"></a>四、全相联高速内存</h3>]]></content>
      <categories>
        <category>csapp</category>
      </categories>
      <tags>
        <tag>存储器层次结构</tag>
      </tags>
  </entry>
</search>
